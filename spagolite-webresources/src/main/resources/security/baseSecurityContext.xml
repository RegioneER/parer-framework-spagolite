<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"       
       xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Unsecured pages -->
    <security:http security="none" pattern="/images/**" />
    <security:http security="none" pattern="/Logout.html" />
    <security:http security="none" pattern="/img/**" />
    <security:http security="none" pattern="/css/**" />
    <security:http security="none" pattern="/js/**" />
    <security:http security="none" pattern="/webjars/**" />
	
    <!-- Secured pages -->
    <security:http entry-point-ref="samlEntryPoint">
        <security:intercept-url pattern="/**" access="fullyAuthenticated" />
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter" />
        <!-- CRSF token -->
        <security:csrf request-matcher-ref="csrfMatcher"/>
        <!-- Security Headers (default) -->
		<security:headers>
			<!-- default -->
			<security:content-type-options /> <!-- static header -->
			<security:referrer-policy policy="strict-origin-when-cross-origin" /> <!-- static header -->
			<!-- from system properties -->			
			<security:content-security-policy policy-directives="#{ systemProperties['http.sec.header.content-security-policy'] ?: 'default-src ''self''; script-src ''self'' ''unsafe-inline'' ''unsafe-eval'' ''report-sample'' *; style-src ''self'' ''report-sample'' ''unsafe-inline'' *; img-src ''self'' data: *;' }" report-only="false" />
			<!-- Note: header:permissions-policy does not work ! (xsd error) need to upgrade spring security >= 5.5 -->
			<security:header name="Permissions-Policy" value="#{ systemProperties['http.sec.header.permissions-policy'] ?: 'cross-origin-isolated=*, vertical-scroll=*' }" /> 
		</security:headers>
    </security:http>

    <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint" />
            <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter" />
            <security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter" />
            <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter" />
            <security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter" />
            <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter" />
            <security:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery" />
        </security:filter-chain-map>
    </bean>
	
	
    <bean id="csrfMatcher"
              class="org.springframework.security.web.util.matcher.OrRequestMatcher">
        <constructor-arg>
            <list
                value-type="org.springframework.security.web.util.matcher.RequestMatcher">
                <bean
                    class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg name="pattern" value="/*.html" />
                    <constructor-arg name="httpMethod" value="POST" />
                </bean>
                <bean
                    class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg name="pattern" value="/*.html" />
                    <constructor-arg name="httpMethod" value="PUT" />
                </bean>
                <bean
                    class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg name="pattern" value="/*.html" />
                    <constructor-arg name="httpMethod" value="DELETE" />
                </bean>
            </list>
        </constructor-arg>
    </bean>
	
    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="successRedirectHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/" />
    </bean>
    <!-- Use the following for interpreting RelayState coming from unsolicited response as redirect URL: <bean id="successRedirectHandler" 
    class="org.springframework.security.saml.SAMLRelayStateSuccessHandler"> <property name="defaultTargetUrl" value="/" 
    /> </bean> -->

    <!-- Handler for successful logout -->
    <bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/Logout.html?operation=success" />
    </bean>

    <!-- Logout Cookie clearing -->
    <bean id="logoutCookieHandler"
              class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
        <constructor-arg>
            <value type="java.lang.String">JSESSIONID</value>
        </constructor-arg>
    </bean>
	
    <!-- Register authentication manager with SAML provider -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="samlAuthenticationProvider" />
    </security:authentication-manager>

    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger" />

    <!-- 2 Liste di valori per il caso di SPID livello 1 e 2 usati in base al parametro di ambiente -->
    <!-- abilitaLivello1SPID (true|false) presente sull'application server -->
    <util:list id="spidLivello1List" value-type="java.lang.String">
        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</value>
        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword</value>
        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard</value>
    </util:list>
    <util:list id="spidLivello2List" value-type="java.lang.String">
        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword</value>
        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard</value>
    </util:list>
        
    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="it.eng.spagoLite.security.saml.SliteSAMLEntryPoint">
        <property name="defaultProfileOptions">
            <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                <property name="binding" value="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"/>
                <property name="includeScoping" value="false" />
                <!-- Valori aggiunti per SPID. Estrae dalla configurazione di jboss gli url di ritorno -->
                <property name="relayState" ref="samlRelayState" />
                <property name="authnContexts" >
                <ref bean="#{ systemProperties['abilita-livello-1-spid'] == null ? 'spidLivello2List' : (systemProperties['abilita-livello-1-spid'] == 'true' ? 'spidLivello1List' :'spidLivello2List') }" />
                </property>
<!--
                <property name="authnContexts">
                    <list>
                        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</value>
                        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword</value>
                        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard</value>
                    </list>
                </property>
-->                            
            </bean>
        </property>
    </bean>
    
    <!-- IDP Discovery Service -->
    <bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
<!--        <property name="idpSelectionPath" value="/WEB-INF/security/idpSelection.jsp" /> -->
        <property name="idpSelectionPath" value="/jsp/login/idpSelection.jsp" />
    </bean>
	
    <!-- The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metadata there -->
    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />
	
    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
    <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
        <!-- OPTIONAL property: can be used to store/load user data after login -->
        <property name="userDetails" ref="sliteUserDetail" />
    </bean>

    <!-- SpagoLite User detail bean -->
<!--    <bean id="sliteUserDetail" class="it.eng.spagoLite.security.saml.SliteSAMLUserDetail" /> -->

    <!-- Provider of default SAML Context -->
    <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl" />

    <!-- Processing filter for WebSSO profile messages -->
    <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="authenticationSuccessHandler" ref="successRedirectHandler" />
    </bean>

    <!-- Processing filter for WebSSO Holder-of-Key profile -->
    <bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="authenticationSuccessHandler" ref="successRedirectHandler" />
    </bean>

    <!-- Logout handler terminating local session -->
    <bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="true" />
    </bean>

    <!-- Override default logout processing filter with the one processing SAML 
    messages -->
    <bean id="samlLogoutFilter"
              class="org.springframework.security.saml.SAMLLogoutFilter">
        <constructor-arg ref="successLogoutHandler" />
        <constructor-arg>
            <array>
                <ref bean="logoutHandler" />
                <ref bean="logoutCookieHandler" />
            </array>
        </constructor-arg>
        <constructor-arg>
            <array>
                <ref bean="logoutHandler" />
                <ref bean="logoutCookieHandler" />
            </array>
        </constructor-arg>
    </bean>

    <!-- Filter processing incoming logout messages -->
    <!-- First argument determines URL user will be redirected to after successful 
    global logout -->
    <bean id="samlLogoutProcessingFilter"
              class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
        <constructor-arg ref="successLogoutHandler" />
        <constructor-arg>
            <array>
                <ref bean="logoutHandler" />
                <ref bean="logoutCookieHandler" />
            </array>
        </constructor-arg>
    </bean>
	
    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <constructor-arg>
            <list>
                <ref bean="redirectBinding" />
                <ref bean="postBinding" />
                <ref bean="artifactBinding" />
                <ref bean="soapBinding" />
                <ref bean="paosBinding" />
            </list>
        </constructor-arg>
    </bean>
	
    <!-- SAML 2.0 WebSSO Assertion Consumer -->
    <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl" />

    <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
    <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

    <!-- SAML 2.0 Web SSO profile -->
    <bean id="webSSOprofile" class="it.eng.spagoLite.security.saml.SliteWebSSOProfileImpl" />

    <!-- SAML 2.0 Holder-of-Key Web SSO profile -->
    <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

    <!-- SAML 2.0 ECP profile -->
    <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl" />

    <!-- SAML 2.0 Logout Profile -->
    <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl" />

    <!-- Bindings, encoders and decoders used for creating and parsing messages -->
    <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
        <constructor-arg ref="parserPool" />
        <constructor-arg ref="velocityEngine" />
    </bean>

    <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <constructor-arg ref="parserPool" />
    </bean>

    <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
        <constructor-arg ref="parserPool" />
        <constructor-arg ref="velocityEngine" />
        <constructor-arg>
            <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                <constructor-arg>
                    <bean class="org.apache.commons.httpclient.HttpClient">
                        <constructor-arg>
                            <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <property name="processor">
                    <bean id="soapProcessor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                        <constructor-arg ref="soapBinding" />
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
        <constructor-arg ref="parserPool" />
    </bean>

    <bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
        <constructor-arg ref="parserPool" />
    </bean>

    <!-- Initialization of OpenSAML library -->
    <bean class="org.springframework.security.saml.SAMLBootstrap" />

    <!-- Initialization of the velocity engine -->
    <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine" />

    <!-- XML parser pool needed for OpenSAML parsing -->
    <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" scope="singleton"
              init-method="initialize" />
    <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder" scope="singleton" />

    <!-- Aggiunto per risolvere il problema dell'Issuer della Puglia che voleva accodato il Tenant dopo l'entityId ('@conservazione' ad esempio). -->
    <!-- Lo spazio accodato l'ho messo per evitare che se non trova la proprietà mi falliva il costruttore! -->
    <bean id="suffissoIssuerSamlRequest" class="java.lang.String">
        <constructor-arg value="#{systemProperties['suffisso-issuer-saml-request']}#{''}"/>
    </bean>

</beans>
